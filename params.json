{"name":"Jssmartcheck","tagline":"Property based generative testing for JavaScript","body":"# jssmartcheck\r\njssmartcheck is a JavaScript property-based testing tool inspired by Haskell's [QuickCheck](https://wiki.haskell.org/Introduction_to_QuickCheck1) and Clojure's [test.check](https://github.com/clojure/test.check).\r\n\r\nProperty based testing is also known as generator based testing or generative testing. The principle behind property based testing is that it's really hard to create random testing data which covers all edge cases. But if we let the machine do the generation of test data for us, we could catch many more errors than otherwise. The generation of data by machine also lets us run our test on much more data than using manual methods.\r\n\r\nAnother difference from traditional unit testing is that instead of giving the tests an 'expected output', we need to specify a property of the function which holds true for a given 'set' of input. This makes us think harder about the way we write functions, a welcome side effect.\r\n\r\n# How to Use\r\n```\r\n$ npm install git+https://git@github.com/mukeshsoni/jssmartcheck.git\r\n```\r\n\r\nIn your test file - \r\n\r\n```\r\nvar jsc = require('jssmartcheck');\r\nvar gen = jsc.gen;\r\n\r\n// sort is idempotent\r\nvar property = function(x) {\r\n    return x.sort() === x.sort().sort();\r\n}\r\n\r\n// for all array of integers 'l', sorting l once is equal to sorting l twice\r\njsc.forAll(gen.arrayOf(gen.int)).check(property);\r\n// { result: true, numTests: 100, seed: 14.77343332953751 }\r\n\r\n```\r\n\r\nExample of a failing test case - \r\n\r\n```\r\n// the first element of a sorted array of integers is less than the last element\r\nvar propFn = (x) => {\r\n    x.sort();\r\n    return x[0] < x[x.length - 1];\r\n}\r\n\r\nvar nonEmptyGen = gen.suchThat((n) => n.length > 0, gen.arrayOf(gen.int));\r\njsc.forAll(nonEmptyGen).check(propFn)\r\n// {\"result\":false,\"numTests\":0,\"fail\":[[0,0]]} \r\n```\r\n\r\njssmartcheck will throw an AssertionError if the property function fails for any of the generated input. The printed output will show `result` key as false for a failing test case.\r\n\r\nAlso as seen in the failing test case, one can easily compose new generators out of the existing ones. jssmartcheck even provides a few helper functions to make the process of writing custom generators easy.\r\n\r\n# Integration with testing frameworks\r\njssmartcheck works out of the box for [mochajs](http://mochajs.org/). Should also work with jasmine and qunit but have not been tested yet.\r\n\r\n# Documentation\r\n\r\n## Generators\r\nGenerators help you generate random values of a specific type against which the property function is run. *jssmartcheck* provides a number of generators to get you started. You can also compose your own generators using the existing ones. Or roll up your own. They are just functions.\r\n\r\nYou can use the gen.sample function to quickly check what a generator might produce.\r\n\r\n### Simple Generators\r\n```\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate 10 random integers\r\ngen.sample(gen.int, 10); // [ 0, 0, -1, 1, -2, 4, 1, 0, -6, 0 ]\r\n\r\n// generate 10 random positive integers\r\ngen.sample(gen.int.positive); // [ 0, 0, -1, 1, -2, 4, 1, 0, -6, 0 ]\r\n\r\n// generate 5 random strings\r\ngen.sample(gen.string, 5); // [ '', '', '\\u0012', 'tû¨', 'è' \r\n\r\n```\r\n\r\n### Slightly complex Generators\r\n```\r\n// generate 10 random ascii strings\r\ngen.sample(gen.string.ascii, 10); // [ '', '', '9', '', 'rNq', '6b#Ph', 'J', 'r', '.K', '\\'qwq DcZ' ]\r\n\r\n// generate 10 random alpha numeric strings\r\ngen.sample(gen.string.alphaNum, 10); // [ '', '', '', 'Ti', 'A', 'vInl', 'Wi', 'puniD', 'q3z', 'RuZZ3Rsh' ]\r\n\r\n// generate 5 strings matching the given pattern\r\ngen.sample(gen.string.matches(/boo{1,3}m/)); // [ 'boom', 'boom', 'boooom', 'booom', 'boom' ]\r\n\r\n// generate numeric strings of length 3-6 characters and numeric only\r\ngen.sample(gen.string.matches(/\\d{3,6}/), 5); // [ '3404', '3685', '4451', '137513', '75258' ]\r\n\r\n// generate an object of given shape\r\ngen.sample(gen.object.ofShape({\r\n    name: gen.string.matches(/\\w{3,5}(\\s\\w{5,8})?/),\r\n    age: gen.suchThat((age) => age > 4, gen.int.positive),\r\n    sex: gen.elements(['M', 'F', 'Neither'])\r\n}), 10)\r\n\r\n/*\r\n    [ \r\n        { name: 'vWo4 _7ivwS', age: 10, sex: 'M' },\r\n        { name: 'T9uZe', age: 9, sex: 'F' },\r\n        { name: '53f O_JBi1u', age: 6, sex: 'M' },\r\n        { name: '0n1', age: 6, sex: 'Neither' },\r\n        { name: '49yW MQzJyHBR', age: 5, sex: 'F' },\r\n        { name: 'm24　XbC68G', age: 6, sex: 'M' },\r\n        { name: 'iON i_7u5_V', age: 7, sex: 'F' },\r\n        { name: '_3yc', age: 7, sex: 'Neither' },\r\n        { name: 'StH_\\fJE3_fJX', age: 10, sex: 'M' },\r\n        { name: '7bo8\\fwt73_H', age: 7, sex: 'F' } \r\n    ]\r\n*/\r\n```\r\n\r\n## Detailed Documentation of all Generators\r\n### Number generators\r\n**integers** - gen.int\r\n\r\n```\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate 10 random integers\r\ngen.sample(gen.int, 10); // [ 0, 0, -1, 1, -2, 4, 1, 0, -6, 0 ]\r\n\r\n```\r\n\r\n**positive integers** - gen.int.positive\r\n```\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate 10 random positive integers\r\ngen.sample(gen.int.positive, 10); // [ 0, 0, -1, 1, -2, 4, 1, 0, -6, 0 ]\r\n```\r\n\r\n**integer in a range** - gen.int.between\r\n```\r\n\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate 10 integer in the range [min, max] (both inclusive)\r\ngen.sample(gen.int.between(10, 100), 10); // [ 55, 31, 10, 75, 84, 19, 59, 34, 86, 12]\r\n```\r\n\r\n**floating point number** - gen.float\r\n```\r\n\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate 10 floating point numbers\r\ngen.sample(gen.float, 10); \r\n\r\n/* \r\n    [ \r\n        0,\r\n        -9263.793444260955,\r\n        1457.7880781143904,\r\n        -23325.45812241733,\r\n        -27032.062970101833,\r\n        -22139.405994676054,\r\n        53050.33131502569,\r\n        30739.869456738234,\r\n        25103.324092924595,\r\n        65394.96577810496 \r\n    ]\r\n*/\r\n```\r\n\r\n**large integer** - gen.int.large\r\n```\r\n\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate 10 large integers\r\ngen.sample(gen.int.large, 10); \r\n\r\n/*\r\n    [ \r\n        1.7942217500110602e+308,\r\n        2.9093457718352433e+306,\r\n        3.6593154190409177e+307,\r\n        8.085731107763065e+306,\r\n        9.616694531726025e+307,\r\n        1.1036431189239296e+308,\r\n        1.7337810355081831e+308,\r\n        1.7816857602101413e+308,\r\n        6.798105794239869e+307,\r\n        4.032906283193464e+307 \r\n    ]\r\n*/\r\n```\r\n\r\n**unsigned integer** - gen.uint\r\n```\r\n\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate 10 unsigned integers\r\ngen.sample(gen.uint, 10);  //[ 0, 0, 3, 6, 14, 18, 23, 10, 21, 11 ]\r\n```\r\n\r\n### String generators\r\n\r\n**strings** - gen.string\r\n\r\n```\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate 10 strings\r\ngen.sample(gen.string, 10); \r\n\r\n/*\r\n    [ \r\n        '',\r\n        '',\r\n        '',\r\n        'ð',\r\n        'K',\r\n        '[²Wg',\r\n        '\\u0001çä',\r\n        '\"qt',\r\n        'jK\\u001c]ô',\r\n        '²Ý»¼¶\\tG' \r\n    ]\r\n*/\r\n```\r\n\r\n### Array generators\r\n\r\n**array** - gen.arrayOf\r\n\r\n```\r\nvar gen = require('jssmartcheck').gen;\r\n\r\n// generate an array of integers\r\ngen.sample(gen.arrayOf(gen.int), 1); // [ [0, 4, 2, 6] ]\r\n```","google":"UA-58935518-1","note":"Don't delete this file! It's used internally to help with page regeneration."}